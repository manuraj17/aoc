# input =
#   '''467..114..
# ...*......
# ..35..633.
# ......#...
# 617*......
# .....+.58.
# ..592.....
# ......755.
# ...$.*....
# .664.598..'''
#

# input =
# '''............409..........784...578...802......64..............................486.248..............177....................369...............
# .....-939..........524#...#....=.......*.........+......90.................................76..615..-..@.....961..........$.......*.........
# ............951*........................736...955..258....*.....253@.............210.10.....=...*.......776...*....&...............600..274.
# 152.78..........671.....936.......................*..........14...............................575.=.........214..519.....787.739........*...
# ...*....591......................514*155..........807...............516.............23...5#.......250.531...................*......-..71....
# .............................................254..........69&........*..............*....................*...............*........785.......
# ....5....../.42..908*166..242*825.....................19%............148..822......127..+...+...........971...........206.540.753...........
# ........111.........................%...............$..........635..........*..........222.286..823..........%................&...=630......
# ..821&.......815.............424$...303.322.311..156...........*....786.....91..620............*....319......406......187..............&865.
# ........................&975...............*.........649.40..417.......+.........../............39....................*...........%.........'''
input = File.read('input.txt')
lines = input.split("\n")

def is_symbol?(c)
  return false if c == '.' || ('0'..'9').include?(c)

  true
end

def generate_positions(x, y)
  [
    [x + 1, y],
    [x + 1, y + 1],
    [x + 1, y - 1],

    [x - 1, y],
    [x - 1, y + 1],
    [x - 1, y - 1],

    [x, y + 1],
    [x, y - 1]
  ]
end

def check(pos, matrix)
  index = pos[0]
  ps = pos[1].to_i
  pe = pos[2].to_i
  v = pos[3]

  positions_to_check = []
  (ps..pe).each do |p|
    positions_to_check << generate_positions(index, p)
  end

  xmax = matrix.length - 1
  ymax = matrix[index].length - 1

  positions_to_check.each do |positions|
    positions.each do |x, y|
      next unless (x >= 0 && x <= xmax) && (y >= 0 && y <= ymax)

      return true if is_symbol?(matrix[x][y])
    end
  end

  false
end

re = /(\d+)/
result = []

matrix = lines.map { |l| l.split('') }

lines.each_with_index do |line, index|

  line.enum_for(:scan, re).map do
    p = [ 
      index,
      Regexp.last_match.begin(0),
      (Regexp.last_match.begin(0) + Regexp.last_match[1].length-1),
      Regexp.last_match[1],
    ]

    result << p[3] if check(p, matrix) == true 
  end

end

pp result.map(&:to_i).reduce(&:+)
